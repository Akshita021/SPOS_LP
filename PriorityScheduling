import java.util.*;

class Process {
    int processId;
    int arrivalTime;
    int burstTime;
    int priority;

    public Process(int processId, int arrivalTime, int burstTime, int priority) {
        this.processId = processId;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.priority = priority;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of processes: ");
        int n = scanner.nextInt();

        List<Process> processes = new ArrayList<>();

        // Input process details
        for (int i = 1; i <= n; i++) {
            System.out.println("Enter details for process " + i + ":");
            System.out.print("Arrival Time: ");
            int arrivalTime = scanner.nextInt();
            System.out.print("Burst Time: ");
            int burstTime = scanner.nextInt();
            System.out.print("Priority: ");
            int priority = scanner.nextInt();

            processes.add(new Process(i, arrivalTime, burstTime, priority));
        }

        // Sort processes based on arrival time
        processes.sort(Comparator.comparingInt(p -> p.arrivalTime));

        // Priority Scheduling
        int currentTime = 0;
        int totalWaitingTime = 0;

        System.out.println("\nProcess Execution Order:");
        System.out.println("Gantt Chart:");

        while (!processes.isEmpty()) {
            Process currentProcess = null;
            for (Process process : processes) {
                if (process.arrivalTime <= currentTime) {
                    if (currentProcess == null || process.priority < currentProcess.priority) {
                        currentProcess = process;
                    }
                } else {
                    break;
                }
            }

            if (currentProcess == null) {
                currentTime++;
                System.out.print("-");
            } else {
                processes.remove(currentProcess);
                System.out.print("| Process " + currentProcess.processId +
                        " (P" + currentProcess.priority + ") ");
                totalWaitingTime += currentTime - currentProcess.arrivalTime;
                currentTime += currentProcess.burstTime;
            }
        }

        System.out.println("|");

        double averageWaitingTime = (double) totalWaitingTime / n;
        System.out.println("\nAverage Waiting Time: " + averageWaitingTime);

        scanner.close();
    }
}
